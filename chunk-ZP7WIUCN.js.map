{"version":3,"sources":["node_modules/guid-typescript/dist/guid.js","src/app/pages/demo/demo.component.ts","src/app/pages/demo/demo.component.html","src/app/pages/demo/services/demo.service.ts"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nvar Guid = /** @class */function () {\n  function Guid(guid) {\n    if (!guid) {\n      throw new TypeError(\"Invalid argument; `value` has no value.\");\n    }\n    this.value = Guid.EMPTY;\n    if (guid && Guid.isGuid(guid)) {\n      this.value = guid;\n    }\n  }\n  Guid.isGuid = function (guid) {\n    var value = guid.toString();\n    return guid && (guid instanceof Guid || Guid.validator.test(value));\n  };\n  Guid.create = function () {\n    return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\n  };\n  Guid.createEmpty = function () {\n    return new Guid(\"emptyguid\");\n  };\n  Guid.parse = function (guid) {\n    return new Guid(guid);\n  };\n  Guid.raw = function () {\n    return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\n  };\n  Guid.gen = function (count) {\n    var out = \"\";\n    for (var i = 0; i < count; i++) {\n      // tslint:disable-next-line:no-bitwise\n      out += ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n    }\n    return out;\n  };\n  Guid.prototype.equals = function (other) {\n    // Comparing string `value` against provided `guid` will auto-call\n    // toString on `guid` for comparison\n    return Guid.isGuid(other) && this.value === other.toString();\n  };\n  Guid.prototype.isEmpty = function () {\n    return this.value === Guid.EMPTY;\n  };\n  Guid.prototype.toString = function () {\n    return this.value;\n  };\n  Guid.prototype.toJSON = function () {\n    return {\n      value: this.value\n    };\n  };\n  Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\n  Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\n  return Guid;\n}();\nexports.Guid = Guid;","import { NgClass } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  effect,\n  ElementRef,\n  inject,\n  OnDestroy,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Router } from '@angular/router';\n\nimport { Guid } from 'guid-typescript';\n\nimport { IDemoBattle, IDemoPlayer } from '../../common/resources/interfaces/game.interface';\nimport { StateService } from '../../common/resources/services/state/state.service';\nimport { LoaderComponent } from '../../shared/components/loader/loader.component';\n\nimport { DemoService } from './services/demo.service';\n\nimport { EUnitStatus, Game, GameSettings } from '@victor_monakhov/tanks';\n\n@Component({\n  standalone: true,\n  selector: 'tnm-demo',\n  imports: [\n    MatButtonModule,\n    MatIconModule,\n    LoaderComponent,\n    NgClass,\n  ],\n  templateUrl: './demo.component.html',\n  styleUrl: './demo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DemoComponent implements OnDestroy {\n\n  private readonly stateService = inject(StateService);\n  private readonly demoService = inject(DemoService);\n  private readonly router = inject(Router);\n  private game!: Game;\n\n  demoPanelRef = viewChild<ElementRef<HTMLElement>>('demoPanel');\n  canvasRef = viewChild<ElementRef<HTMLCanvasElement>>('canvas');\n\n  loader = signal<boolean>(true);\n\n  constructor() {\n    if (!this.stateService.inDemo) {\n      this.router.navigate(['welcome']).then();\n    } else {\n      const player = this.stateService.demoPlayer();\n      effect(() => {\n        const game = this.stateService.demoGame();\n        if (game) {\n          const tank = game.tanks.find(item => item.chosenAsPlayer);\n          if (tank) {\n            const demoPanel = this.demoPanelRef().nativeElement;\n            const canvas: HTMLCanvasElement = this.canvasRef().nativeElement;\n            if (demoPanel.clientHeight > demoPanel.clientWidth) {\n              canvas.width = demoPanel.clientHeight - 160;\n              canvas.height = demoPanel.clientWidth - 10;\n              canvas.style.transform = 'rotate(90deg)';\n            } else {\n              canvas.width = demoPanel.clientWidth - 160;\n              canvas.height = demoPanel.clientHeight - 10;\n            }\n            this.startGame(canvas, {\n              tankHead: tank.turret.name,\n              tankBody: tank.hull.name,\n              position: tank.position.position,\n              team: tank.position.team,\n              playerName: player.name,\n            });\n            onbeforeunload = (): void => {\n              if (this.game) {\n                this.game.destroy();\n              }\n            };\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateService.inDemo = false;\n    if (this.game) {\n      this.game.destroy();\n    }\n  }\n\n  onClose(): void {\n    this.router.navigate(['']).then();\n  }\n\n  private startGame(canvas: HTMLCanvasElement, settings: GameSettings): void {\n    const battleId = Guid.create().toString();\n    this.game = new Game(canvas, settings);\n    this.game.stateObserver(state => {\n      if (this.loader()) {\n        this.stateService.addDemoBattle(this.demoService.gameStateToDemoButtle(state, battleId));\n      } else {\n        this.stateService.updateDemoBattle(this.demoService.gameStateToDemoButtle(state, battleId));\n      }\n      this.updatePlayerStats();\n      this.loader.set(false);\n    });\n    this.game.run();\n  }\n\n  private updatePlayerStats(): void {\n    const battles: IDemoBattle[] = this.stateService.demoBattles();\n    const player: IDemoPlayer = this.stateService.demoPlayer();\n    player.totalBattles = battles.length;\n    const partialPlayer = battles.reduce((acc: Partial<IDemoPlayer>, battle: IDemoBattle) => {\n      acc.totalWins = battle.battleStatus === EUnitStatus.Winner ? acc.totalWins + 1 : acc.totalWins;\n      acc.totalDefeats = battle.battleStatus === EUnitStatus.Defeated ? acc.totalDefeats + 1 : acc.totalDefeats;\n      acc.totalKills += battle.player.kills;\n      // Todo add arenas, zrists\n      return acc;\n    }, { totalWins: 0, totalDefeats: 0, totalKills: 0, zrists: player.zrists, arenas: player.arenas });\n    this.stateService.updateDemoPlayerState(partialPlayer);\n  }\n}\n","<div class=\"wrapper\">\n  <button mat-mini-fab type=\"button\" class=\"back-link\" (click)=\"onClose()\">\n    <mat-icon>close</mat-icon>\n  </button>\n  <div class=\"demo-panel\" #demoPanel>\n    @if (loader()) {\n      <tnm-loader class=\"loader\"></tnm-loader>\n    }\n    <canvas [ngClass]=\"{'demo-canvas': true, 'canvas-ready': !loader()}\" #canvas></canvas>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { tankHulls, tankTurrets } from '../../../common/resources/constants/tank-settings';\nimport { IDemoBattle } from '../../../common/resources/interfaces/game.interface';\nimport { IUnitStats } from '../../../common/resources/interfaces/tank.interface';\n\nimport { GameState } from '@victor_monakhov/tanks';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DemoService {\n\n  gameStateToDemoButtle(state: GameState, id: string): IDemoBattle {\n    const units: IUnitStats[] = [state.player, ...state.bots].map(unit => ({\n      name: unit.name,\n      team: unit.team,\n      level: unit.level,\n      kills: unit.kills,\n      deaths: unit.deaths,\n      date: unit.date,\n      turret: tankTurrets.find(item => item.name === unit.tankHead),\n      hull: tankHulls.find(item => item.name === unit.tankBody),\n    }));\n    return units.reduce((acc: IDemoBattle, unit: IUnitStats, index: number) => {\n      if (!index) {\n        acc.id = id;\n        acc.battleStatus = state.gameStatus;\n        acc.player = unit;\n        return acc;\n      } else {\n        acc.bots = acc.bots ? [...acc.bots, unit] : [unit];\n        return acc;\n      }\n    }, { id: null, battleStatus: null, player: null, bots: null });\n  }\n}\n"],"mappings":"8aAAA,IAAAA,EAAAC,EAAAC,GAAA,cAEAA,EAAQ,WAAa,GACrB,IAAIC,EAAoB,UAAY,CAClC,SAASA,EAAKC,EAAM,CAClB,GAAI,CAACA,EACH,MAAM,IAAI,UAAU,yCAAyC,EAE/D,KAAK,MAAQD,EAAK,MACdC,GAAQD,EAAK,OAAOC,CAAI,IAC1B,KAAK,MAAQA,EAEjB,CACA,OAAAD,EAAK,OAAS,SAAUC,EAAM,CAC5B,IAAIC,EAAQD,EAAK,SAAS,EAC1B,OAAOA,IAASA,aAAgBD,GAAQA,EAAK,UAAU,KAAKE,CAAK,EACnE,EACAF,EAAK,OAAS,UAAY,CACxB,OAAO,IAAIA,EAAK,CAACA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAC7F,EACAA,EAAK,YAAc,UAAY,CAC7B,OAAO,IAAIA,EAAK,WAAW,CAC7B,EACAA,EAAK,MAAQ,SAAUC,EAAM,CAC3B,OAAO,IAAID,EAAKC,CAAI,CACtB,EACAD,EAAK,IAAM,UAAY,CACrB,MAAO,CAACA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,EAAGA,EAAK,IAAI,CAAC,CAAC,EAAE,KAAK,GAAG,CACnF,EACAA,EAAK,IAAM,SAAUG,EAAO,CAE1B,QADIC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAOE,IAEzBD,KAAS,EAAI,KAAK,OAAO,GAAK,MAAU,GAAG,SAAS,EAAE,EAAE,UAAU,CAAC,EAErE,OAAOA,CACT,EACAJ,EAAK,UAAU,OAAS,SAAUM,EAAO,CAGvC,OAAON,EAAK,OAAOM,CAAK,GAAK,KAAK,QAAUA,EAAM,SAAS,CAC7D,EACAN,EAAK,UAAU,QAAU,UAAY,CACnC,OAAO,KAAK,QAAUA,EAAK,KAC7B,EACAA,EAAK,UAAU,SAAW,UAAY,CACpC,OAAO,KAAK,KACd,EACAA,EAAK,UAAU,OAAS,UAAY,CAClC,MAAO,CACL,MAAO,KAAK,KACd,CACF,EACAA,EAAK,UAAY,IAAI,OAAO,iEAAkE,GAAG,EACjGA,EAAK,MAAQ,uCACNA,CACT,EAAE,EACFD,EAAQ,KAAOC,IC1Cf,IAAAO,EAAqB,OEJrB,IAAaC,GAAW,IAAA,CAAlB,MAAOA,CAAW,CAEtBC,sBAAsBC,EAAkBC,EAAU,CAWhD,MAV4B,CAACD,EAAME,OAAQ,GAAGF,EAAMG,IAAI,EAAEC,IAAIC,IAAS,CACrEC,KAAMD,EAAKC,KACXC,KAAMF,EAAKE,KACXC,MAAOH,EAAKG,MACZC,MAAOJ,EAAKI,MACZC,OAAQL,EAAKK,OACbC,KAAMN,EAAKM,KACXC,OAAQC,EAAYC,KAAKC,GAAQA,EAAKT,OAASD,EAAKW,QAAQ,EAC5DC,KAAMC,EAAUJ,KAAKC,GAAQA,EAAKT,OAASD,EAAKc,QAAQ,GACxD,EACWC,OAAO,CAACC,EAAkBhB,EAAkBiB,IAClDA,GAMHD,EAAIlB,KAAOkB,EAAIlB,KAAO,CAAC,GAAGkB,EAAIlB,KAAME,CAAI,EAAI,CAACA,CAAI,EAC1CgB,IANPA,EAAIpB,GAAKA,EACToB,EAAIE,aAAevB,EAAMwB,WACzBH,EAAInB,OAASG,EACNgB,GAKR,CAAEpB,GAAI,KAAMsB,aAAc,KAAMrB,OAAQ,KAAMC,KAAM,IAAI,CAAE,CAC/D,iDAxBWL,EAAW,CAAA,iCAAXA,EAAW2B,QAAX3B,EAAW4B,UAAAC,WAFV,MAAM,CAAA,CAAA,SAEP7B,CAAW,GAAA,mGDLlB8B,EAAA,EAAA,aAAA,CAAA,EDgCN,IAAaC,IAAa,IAAA,CAApB,MAAOA,CAAa,CAYxBC,aAAA,CACE,GAXe,KAAAC,aAAeC,EAAOC,CAAY,EAClC,KAAAC,YAAcF,EAAOG,CAAW,EAChC,KAAAC,OAASJ,EAAOK,CAAM,EAGvC,KAAAC,aAAeC,EAAmC,WAAW,EAC7D,KAAAC,UAAYD,EAAyC,QAAQ,EAE7D,KAAAE,OAASC,EAAgB,EAAI,EAGvB,CAAC,KAAKX,aAAaY,OACrB,KAAKP,OAAOQ,SAAS,CAAC,SAAS,CAAC,EAAEC,KAAI,MACjC,CACL,IAAMC,EAAS,KAAKf,aAAagB,WAAU,EAC3CC,EAAO,IAAK,CACV,IAAMC,EAAO,KAAKlB,aAAamB,SAAQ,EACvC,GAAID,EAAM,CACR,IAAME,EAAOF,EAAKG,MAAMC,KAAKC,GAAQA,EAAKC,cAAc,EACxD,GAAIJ,EAAM,CACR,IAAMK,EAAY,KAAKlB,aAAY,EAAGmB,cAChCC,EAA4B,KAAKlB,UAAS,EAAGiB,cAC/CD,EAAUG,aAAeH,EAAUI,aACrCF,EAAOG,MAAQL,EAAUG,aAAe,IACxCD,EAAOI,OAASN,EAAUI,YAAc,GACxCF,EAAOK,MAAMC,UAAY,kBAEzBN,EAAOG,MAAQL,EAAUI,YAAc,IACvCF,EAAOI,OAASN,EAAUG,aAAe,IAE3C,KAAKM,UAAUP,EAAQ,CACrBQ,SAAUf,EAAKgB,OAAOC,KACtBC,SAAUlB,EAAKmB,KAAKF,KACpBG,SAAUpB,EAAKoB,SAASA,SACxBC,KAAMrB,EAAKoB,SAASC,KACpBC,WAAY3B,EAAOsB,KACpB,EACDM,eAAiBA,IAAW,CACtB,KAAKzB,MACP,KAAKA,KAAK0B,QAAO,CAErB,CACF,CACF,CACF,CAAC,CACH,CACF,CAEAC,aAAW,CACT,KAAK7C,aAAaY,OAAS,GACvB,KAAKM,MACP,KAAKA,KAAK0B,QAAO,CAErB,CAEAE,SAAO,CACL,KAAKzC,OAAOQ,SAAS,CAAC,EAAE,CAAC,EAAEC,KAAI,CACjC,CAEQoB,UAAUP,EAA2BoB,EAAsB,CACjE,IAAMC,EAAWC,OAAKC,OAAM,EAAGC,SAAQ,EACvC,KAAKjC,KAAO,IAAIkC,EAAKzB,EAAQoB,CAAQ,EACrC,KAAK7B,KAAKmC,cAAcC,GAAQ,CAC1B,KAAK5C,OAAM,EACb,KAAKV,aAAauD,cAAc,KAAKpD,YAAYqD,sBAAsBF,EAAON,CAAQ,CAAC,EAEvF,KAAKhD,aAAayD,iBAAiB,KAAKtD,YAAYqD,sBAAsBF,EAAON,CAAQ,CAAC,EAE5F,KAAKU,kBAAiB,EACtB,KAAKhD,OAAOiD,IAAI,EAAK,CACvB,CAAC,EACD,KAAKzC,KAAK0C,IAAG,CACf,CAEQF,mBAAiB,CACvB,IAAMG,EAAyB,KAAK7D,aAAa8D,YAAW,EACtD/C,EAAsB,KAAKf,aAAagB,WAAU,EACxDD,EAAOgD,aAAeF,EAAQG,OAC9B,IAAMC,EAAgBJ,EAAQK,OAAO,CAACC,EAA2BC,KAC/DD,EAAIE,UAAYD,EAAOE,eAAiBC,EAAYC,OAASL,EAAIE,UAAY,EAAIF,EAAIE,UACrFF,EAAIM,aAAeL,EAAOE,eAAiBC,EAAYG,SAAWP,EAAIM,aAAe,EAAIN,EAAIM,aAC7FN,EAAIQ,YAAcP,EAAOrD,OAAO6D,MAEzBT,GACN,CAAEE,UAAW,EAAGI,aAAc,EAAGE,WAAY,EAAGE,OAAQ9D,EAAO8D,OAAQC,OAAQ/D,EAAO+D,MAAM,CAAE,EACjG,KAAK9E,aAAa+E,sBAAsBd,CAAa,CACvD,iDAxFWnE,EAAa,CAAA,+BAAbA,EAAakF,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,+QCtC1BE,EAAA,EAAA,MAAA,CAAA,EAAqB,EAAA,SAAA,CAAA,EACkCC,EAAA,QAAA,UAAA,CAAAC,OAAAC,EAAAC,CAAA,EAAAC,EAASN,EAAArC,QAAA,CAAS,CAAA,CAAA,EACrEsC,EAAA,EAAA,UAAA,EAAUM,EAAA,EAAA,OAAA,EAAKC,EAAA,EAAW,EAE5BP,EAAA,EAAA,MAAA,EAAA,CAAA,EACEQ,EAAA,EAAAC,EAAA,EAAA,EAAA,aAAA,CAAA,EAGAhG,EAAA,EAAA,SAAA,EAAA,CAAA,EACF8F,EAAA,EAAM,QAJJG,EAAA,CAAA,EAAAC,EAAAZ,EAAAzE,OAAA,EAAA,EAAA,EAAA,EAGQoF,EAAA,EAAAE,EAAA,UAAAC,EAAA,EAAAC,EAAA,CAAAf,EAAAzE,OAAA,CAAA,CAAA,kBDqBRyF,EAAeC,EACfC,EAAaC,EACbC,EACAC,CAAO,EAAAC,OAAA,CAAA;wDAAA,EAAAC,gBAAA,CAAA,CAAA,CAAA,SAME5G,CAAa,GAAA","names":["require_guid","__commonJSMin","exports","Guid","guid","value","count","out","i","other","import_guid_typescript","DemoService","gameStateToDemoButtle","state","id","player","bots","map","unit","name","team","level","kills","deaths","date","turret","tankTurrets","find","item","tankHead","hull","tankHulls","tankBody","reduce","acc","index","battleStatus","gameStatus","factory","ɵfac","providedIn","ɵɵelement","DemoComponent","constructor","stateService","inject","StateService","demoService","DemoService","router","Router","demoPanelRef","viewChild","canvasRef","loader","signal","inDemo","navigate","then","player","demoPlayer","effect","game","demoGame","tank","tanks","find","item","chosenAsPlayer","demoPanel","nativeElement","canvas","clientHeight","clientWidth","width","height","style","transform","startGame","tankHead","turret","name","tankBody","hull","position","team","playerName","onbeforeunload","destroy","ngOnDestroy","onClose","settings","battleId","Guid","create","toString","Game","stateObserver","state","addDemoBattle","gameStateToDemoButtle","updateDemoBattle","updatePlayerStats","set","run","battles","demoBattles","totalBattles","length","partialPlayer","reduce","acc","battle","totalWins","battleStatus","EUnitStatus","Winner","totalDefeats","Defeated","totalKills","kills","zrists","arenas","updateDemoPlayerState","selectors","viewQuery","rf","ctx","ɵɵelementStart","ɵɵlistener","i0","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","DemoComponent_Conditional_6_Template","ɵɵadvance","ɵɵconditional","ɵɵproperty","ɵɵpureFunction1","_c2","MatButtonModule","MatMiniFabButton","MatIconModule","MatIcon","LoaderComponent","NgClass","styles","changeDetection"],"x_google_ignoreList":[0]}